// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Three_Far_Away.DbContexts;

#nullable disable

namespace Three_Far_Away.Migrations
{
    [DbContext(typeof(ThereFarAwayDbContext))]
    [Migration("20230524175058_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Three_Far_Away.Models.Arrangement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.HasIndex("UserId");

                    b.ToTable("arrangements");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Attraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<Guid?>("JourneyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JourneyId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JourneyId2")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.HasIndex("JourneyId1");

                    b.HasIndex("JourneyId2");

                    b.HasIndex("LocationId");

                    b.ToTable("attractions");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("credentials");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Journey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("endDate");

                    b.Property<Guid>("EndLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("startDate");

                    b.Property<int>("Transportation")
                        .HasColumnType("int")
                        .HasColumnName("transportation");

                    b.HasKey("Id");

                    b.HasIndex("EndLocationId");

                    b.ToTable("journeys");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.HasKey("Id");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Three_Far_Away.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Arrangement", b =>
                {
                    b.HasOne("Three_Far_Away.Models.Journey", "Journey")
                        .WithMany()
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Three_Far_Away.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Attraction", b =>
                {
                    b.HasOne("Three_Far_Away.Models.Journey", null)
                        .WithMany("Accomodations")
                        .HasForeignKey("JourneyId");

                    b.HasOne("Three_Far_Away.Models.Journey", null)
                        .WithMany("Attractions")
                        .HasForeignKey("JourneyId1");

                    b.HasOne("Three_Far_Away.Models.Journey", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("JourneyId2");

                    b.HasOne("Three_Far_Away.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Credential", b =>
                {
                    b.HasOne("Three_Far_Away.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Journey", b =>
                {
                    b.HasOne("Three_Far_Away.Models.Location", "EndLocation")
                        .WithMany()
                        .HasForeignKey("EndLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndLocation");
                });

            modelBuilder.Entity("Three_Far_Away.Models.Location", b =>
                {
                    b.HasOne("Three_Far_Away.Models.Journey", null)
                        .WithOne("StartLocation")
                        .HasForeignKey("Three_Far_Away.Models.Location", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Three_Far_Away.Models.Journey", b =>
                {
                    b.Navigation("Accomodations");

                    b.Navigation("Attractions");

                    b.Navigation("Restaurants");

                    b.Navigation("StartLocation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
